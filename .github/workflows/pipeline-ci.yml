name: CI

on:
  push:

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    
      - name: Clonacion de codigo
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Compilacion
        run: |
          mvn package
          #echo 'package'

      - name: EjecucionTestUnitarios
        run: |
          mvn package test

      #- name: Verificar ubicación del archivo jacoco.xml
      #  run: |
      #    pwd
      #    ls -laR

      - name: Generar informe JaCoCo
        run: |
          mvn jacoco:report

      - name: Verificar cobertura
        run: |
          # Ruta del archivo jacoco.xml
          jacoco_file=./target/site/jacoco/jacoco.xml
          
          # Extraer el coverage general del informe JaCoCo
          coverage=$(awk -F '[<>]' '/<counter type="INSTRUCTION"/{covered=$6; total=$10} END{print covered, total}' "$jacoco_file")
          
          # Obtener el valor de cobertura y total
          covered=$(echo "$coverage" | awk '{print $1}')
          total=$(echo "$coverage" | awk '{print $2}')
          
          # Verificar si el total es cero (para evitar la división por cero)
          if [ "$total" -eq 0 ]; then
            echo "Error: Total es cero, no se puede calcular la cobertura."
            exit 1
          fi
          
          # Calcular el porcentaje de cobertura solo si total no es cero
          coverage_percentage=$(echo "scale=2; $covered / $total * 100" | bc)
          echo "Coverage: $coverage_percentage%"
          
          # Comprobar si el coverage es inferior al 90%
          if (( $(awk 'BEGIN {print ("'$coverage_percentage'" < 90) ? 1 : 0}') )); then
            echo "Coverage es inferior al 90%, el pipeline fallará."
            exit 1
          fi

      - name: Publicar informe JaCoCo
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: ${{ github.workspace }}/**/target/site/jacoco/jacoco.xml
          token: ${{ secrets.TOKEN_JACOCO}}
          min-coverage-overall: 80
          #min-coverage-changed-files: 60

      - name: Setup Java JDK
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Analisis SonarCloud
        run: |
          mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:3.11.0.3922:sonar \
          -Dsonar.token=${{secrets.SONAR_TOKEN}} \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.organization=lukasrl \
          -Dsonar.projectKey=LukasRL_microservicio-java

      - name: SonarQube Quality Gate Check
        env:
          SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
          
      - name: Docker Login
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.USER_TOKEN_DOCKER }}
          password: ${{ secrets.TOKEN_DOCKER }}

      - name: Docker build
        run: 
          docker build -t lukasrl/ms-mensaje:lates .

      - name: Docker push
        run: 
          docker push lukasrl/ms-mensaje:lates
  deploy:
    needs: build
    runs-on: self-hosted

    steps:

      - name: Clonacion de codigo
        uses: actions/checkout@v4
      
      - name: Despliegue
        run: |
          kubectl apply -f deploy.yaml